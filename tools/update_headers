#!/bin/env python3

import re

def process_make_output(make_output_file):
    # Read the make output file
    with open(make_output_file, 'r') as file:
        lines = file.readlines()

    # Dictionary to store header files and their variables to be updated
    header_updates = {}

    # Regex pattern to match the multiple definition error lines
    pattern = re.compile(r'.*multiple definition of `(\w+)\'\;.*\/(\w+\.h)\:(\d+)\:')

    # Process each line in the make output
    for line in lines:
        match = pattern.match(line)
        if match:
            variable = match.group(1)
            header_file = match.group(2)
            line_number = int(match.group(3))

            if header_file not in header_updates:
                header_updates[header_file] = {}
            if variable not in header_updates[header_file]:
                header_updates[header_file][variable] = line_number

    # Debug: Print the collected updates
    print("Header updates to be made:")
    for header_file, updates in header_updates.items():
        print(f"{header_file}: {updates}")

    # Update the header files
    for header_file, updates in header_updates.items():
        with open(header_file, 'r') as file:
            lines = file.readlines()

        for variable, line_number in updates.items():
            # Adjust line number to zero-based index
            line_index = line_number - 1
            # Check if 'extern' is already present
            if 'extern' not in lines[line_index]:
                # Debug: Print the line before modification
                print(f"Before modification ({header_file}:{line_number}): {lines[line_index].strip()}")
                # Add 'extern' keyword at the beginning of the line
                lines[line_index] = 'extern ' + lines[line_index]
                # Debug: Print the line after modification
                print(f"After modification ({header_file}:{line_number}): {lines[line_index].strip()}")

        # Write the updated lines back to the header file
        with open(header_file, 'w') as file:
            file.writelines(lines)

    print("Header files updated successfully.")

# Specify the make output file
make_output_file = 'make.out'
process_make_output(make_output_file)

